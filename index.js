'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Generated by CoffeeScript 2.2.4
(function () {
  // This file is part of browserify-helpers
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/browserify-helpers/blob/master/LICENSE
  var Readable, babelPlugins, babelify, browserify, coffeeify_, envify_, fs, lessify_, licensify_, sassify_, uglify_, uglifyjs;

  require('babel-polyfill');

  fs = require('fs');

  var _require = require('stream');

  Readable = _require.Readable;


  browserify = require('browserify');

  babelify = require('babelify');

  babelPlugins = [];

  try {
    babelPlugins.push(require('babel-plugin-transform-object-rest-spread'));
  } catch (error1) {}

  try {
    babelPlugins.push(require('babel-plugin-transform-class-properties'));
  } catch (error1) {}

  try {
    coffeeify_ = require('coffeeify');
  } catch (error1) {}

  try {
    envify_ = require('envify/custom');
  } catch (error1) {}

  try {
    sassify_ = require('sassify');
  } catch (error1) {}

  try {
    lessify_ = require('lessify');
  } catch (error1) {}

  try {
    licensify_ = require('licensify');
  } catch (error1) {}

  try {
    uglifyjs = require('uglify-js');
  } catch (error1) {}

  uglify_ = function uglify_(instream, _ref) {
    var _ref$keep_fnames = _ref.keep_fnames,
        keep_fnames = _ref$keep_fnames === undefined ? false : _ref$keep_fnames;

    var jscode, outstream, uglifying;
    jscode = "";
    outstream = new Readable();
    instream.on('readable', function () {
      var buffer;
      buffer = instream.read();
      if (buffer) {
        return jscode += buffer.toString();
      }
    });
    uglifying = new Promise(function (resolve, reject) {
      instream.on('end', function () {
        var minjs;
        // A way to see all available options is https://skalman.github.io/UglifyJS-online/
        // NOTE: Also Uglify's 'preamble' option is interesting
        minjs = uglifyjs.minify(jscode, {
          output: {
            comments: 'some'
          },
          keep_fnames: keep_fnames
        });
        if (minjs.error) {
          // Simply rejecting minjs.error would only show its message and
          // not the rest of the metadata
          console.error(minjs.error);
          reject(minjs.error);
          return;
        }
        outstream.push(minjs.code);
        // https://stackoverflow.com/a/22085851
        outstream.push(null);
        return resolve(outstream);
      });
      return instream.on('error', function (error) {
        return reject(error);
      });
    });
    return uglifying;
  };

  // Note how 'envify' is then used to configure 'envify_'
  // Note how 'uglify' is then used to configure 'uglify_'
  module.exports.jspack = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(entry, bundlepath, _ref2) {
      var _ref2$require = _ref2.require,
          require = _ref2$require === undefined ? null : _ref2$require,
          _ref2$external = _ref2.external,
          external = _ref2$external === undefined ? [] : _ref2$external,
          _ref2$coffeeify = _ref2.coffeeify,
          coffeeify = _ref2$coffeeify === undefined ? false : _ref2$coffeeify,
          _ref2$envify = _ref2.envify,
          envify = _ref2$envify === undefined ? false : _ref2$envify,
          _ref2$sassify = _ref2.sassify,
          sassify = _ref2$sassify === undefined ? false : _ref2$sassify,
          _ref2$lessify = _ref2.lessify,
          lessify = _ref2$lessify === undefined ? false : _ref2$lessify,
          _ref2$debug = _ref2.debug,
          debug = _ref2$debug === undefined ? false : _ref2$debug,
          _ref2$licensify = _ref2.licensify,
          licensify = _ref2$licensify === undefined ? false : _ref2$licensify,
          _ref2$uglify = _ref2.uglify,
          uglify = _ref2$uglify === undefined ? false : _ref2$uglify;

      var bfy, extfile, i, jsstream, len, outstream;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              bfy = browserify(entry, {
                extensions: ['.js', '.coffee'],
                debug: debug
              });
              if (require) {
                bfy.require(require);
              }
              for (i = 0, len = external.length; i < len; i++) {
                extfile = external[i];
                bfy.external(extfile);
              }

              if (!coffeeify) {
                _context.next = 7;
                break;
              }

              if (coffeeify_) {
                _context.next = 6;
                break;
              }

              throw new Error("'coffeeify' is not installed");

            case 6:
              bfy.transform(coffeeify_);

            case 7:
              if (!envify) {
                _context.next = 11;
                break;
              }

              if (envify_) {
                _context.next = 10;
                break;
              }

              throw new Error("'envify' is not installed");

            case 10:
              bfy.transform(envify_(envify), {
                global: true
              });

            case 11:
              if (!sassify) {
                _context.next = 15;
                break;
              }

              if (sassify_) {
                _context.next = 14;
                break;
              }

              throw new Error("'sassify' is not installed");

            case 14:
              bfy.transform(sassify_, {
                global: true
              });

            case 15:
              if (!lessify) {
                _context.next = 19;
                break;
              }

              if (lessify_) {
                _context.next = 18;
                break;
              }

              throw new Error("'lessify' is not installed");

            case 18:
              bfy.transform(lessify_, {
                global: true
              });

            case 19:
              if (!licensify) {
                _context.next = 23;
                break;
              }

              if (licensify_) {
                _context.next = 22;
                break;
              }

              throw new Error("'licensify' is not installed");

            case 22:
              bfy.plugin(licensify_);

            case 23:
              bfy.transform(babelify, {
                presets: ['env'],
                // Yes, it is needed to repeat the 'extensions' option here
                extensions: ['.js', '.coffee'],
                plugins: babelPlugins,
                comments: false,
                compact: false
              });
              jsstream = bfy.bundle();

              if (!uglify) {
                _context.next = 31;
                break;
              }

              if (uglifyjs) {
                _context.next = 28;
                break;
              }

              throw new Error("'uglify-js' is not installed");

            case 28:
              _context.next = 30;
              return uglify_(jsstream, uglify);

            case 30:
              jsstream = _context.sent;

            case 31:
              outstream = jsstream.pipe(fs.createWriteStream(bundlepath));
              return _context.abrupt('return', new Promise(function (resolve, reject) {
                outstream.on('close', function () {
                  return resolve(outstream);
                });
                return outstream.on('error', function (error) {
                  return reject(error);
                });
              }));

            case 33:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x, _x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }();
}).call(undefined);