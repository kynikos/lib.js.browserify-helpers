// Generated by CoffeeScript 2.1.1
(function() {
  // This file is part of browserify-helpers
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/browserify-helpers/blob/master/LICENSE
  var Readable, babelify, browserify, coffeeify, error, fs, lessify_, uglify, uglifyjs;

  fs = require('fs');

  ({Readable} = require('stream'));

  browserify = require('browserify');

  coffeeify = require('coffeeify');

  babelify = require("babelify");

  uglifyjs = require("uglify-js");

  try {
    lessify_ = require('lessify');
  } catch (error1) {
    error = error1;
    lessify_ = null;
  }

  uglify = function(instream) {
    var jscode, outstream, uglifying;
    jscode = "";
    outstream = new Readable();
    instream.on('readable', function() {
      var buffer;
      buffer = instream.read();
      if (buffer) {
        return jscode += buffer.toString();
      }
    });
    uglifying = new Promise(function(resolve, reject) {
      instream.on('end', function() {
        var minjs;
        minjs = uglifyjs.minify(jscode);
        outstream.push(minjs.code);
        // https://stackoverflow.com/a/22085851
        outstream.push(null);
        return resolve(outstream);
      });
      return instream.on('error', function(error) {
        return reject(error);
      });
    });
    return uglifying;
  };

  module.exports.jspack = async function(entry, bundlepath, {require = null, external = [], lessify = false, debug = false}) {
    var bfy, extfile, i, jsstream, len, outstream;
    bfy = browserify(entry, {
      extensions: ['.coffee'],
      debug: debug
    });
    if (require) {
      bfy.require(require);
    }
    for (i = 0, len = external.length; i < len; i++) {
      extfile = external[i];
      bfy.external(extfile);
    }
    bfy.transform(coffeeify);
    if (lessify) {
      if (!lessify_) {
        throw new Error("'lessify' is not installed");
      }
      bfy.transform(lessify_, {
        global: true
      });
    }
    bfy.transform(babelify, {
      presets: ["env"],
      // Yes, it is needed to repeat the 'extensions' option here
      extensions: [".coffee"],
      comments: false,
      compact: false
    });
    jsstream = bfy.bundle();
    if (!debug) {
      jsstream = (await uglify(jsstream));
    }
    outstream = jsstream.pipe(fs.createWriteStream(bundlepath));
    return new Promise(function(resolve, reject) {
      outstream.on('close', function() {
        return resolve(outstream);
      });
      return outstream.on('error', function(error) {
        return reject(error);
      });
    });
  };

}).call(this);
